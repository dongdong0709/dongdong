#include<iostream>
using namespace std;
//同名中的静态成员的处理
class Base {
public:
	static void func() {
		cout << "Base—static void func()的调用" << endl;
	}
	static void func(int a) {
		cout << "Base—static void func(int a)的调用" << endl;
	}
	static int a;//静态成员——类内声明——类外初始化
};
int Base::a = 100;;//类外初始化
class Son :public Base {
public:
	static void func() {
		cout << "Son—static void func()的调用" << endl;
	}
	static int a;//静态成员——类内声明——类外初始化
};
int Son::a = 200;

//同名静态成员属性
void test01() {
	//1.通过对象来访问
	cout << "通过对象来访问" << endl;
	Son s;
	cout << "Son类下的a的值为" << s.a << endl;
	cout << "Base类下的a的值为" << s.Base::a << endl;
	//2.通过类名来访问数据
	cout << "通过类名来访问" << endl;
	cout << "Son类下的a的值为" << Son::a << endl;

	//第一个::表示通过类名的方式访问，第二个::代表访问父类作用域下
	cout << "Base类下的a的值为" << Son::Base::a << endl;//想通过子类对象访问到父类中的a数据，并且还要通过类名的方式来访问
}
//同名静态成员函数
void test02() {
	//1.通过对象来访问
	cout << "通过对象的方式来访问" << endl;
	Son s;
	s.func();
	s.Base::func();
	//2.通过类名来访问
	cout << "通过类名的方式来访问" << endl;
	Son::func();
	Son::Base::func();
	//子类出现和父类同名的静态成员函数，也会隐藏父类中所有的同名成员函数
	//如果想访问父类中的被隐藏同名成员，需要加作用域
	Son::Base::func(10);
}
int main() {
	//test01();
	test02();
}
