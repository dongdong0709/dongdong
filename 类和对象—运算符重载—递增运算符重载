#include<iostream>
using namespace std;
//重载递增运算符

//自定义整型
class myInteger {
	friend ostream& operator<<(ostream& cout, myInteger& myInt);
public:
	myInteger() {
		m_num = 0;
	}
	//重载前置++运算符
	myInteger& operator++() {
		m_num++;
		//先进行递增的运算，然后再返回自身
		return *this;
	}
	//重载后置++运算符——int代表占位参数,用来区分前置和后置递增
	myInteger& operator++(int) {
		//1.先记录当时结果
		myInteger temp = *this;
		//2.后 递增
		m_num++;
		//3.最后将记录结果返回
		return temp;
	}
private:
	int m_num;
};
//重载左移运算符
ostream& operator<<(ostream& cout, myInteger& myInt) {
	cout << "m_num=" << myInt.m_num;
	return cout;
}
void test01() {
	myInteger myInt;
	cout << ++(++myInt) << endl;
}
void test02() {
	myInteger myInt;
	cout << myInt++ << endl;
	cout << myInt << endl;
}
int main() {
	//test01();
	test02();
}
