//电脑主要组成部件为CPU（用于计算）,显卡（用于显示），内存条（用于存储）
// 将每个零件封装出抽象基类，并且提供不同的厂商生产不同的零件，例如Intel厂商和Lenovo厂商
// 创建电脑类提供让电脑工作的函数，并且调用每个零件工作的接口
// 测试时组装三台不同的电脑进行工作
#include<iostream>
using namespace std;
class CPU {
public:
	virtual void calculate() = 0;
};
class XK {
public:
	virtual void display() = 0;
};
class NCT {
public:
	virtual void storage() = 0;
};
class Computer {
public:
	Computer(CPU* cpu, XK* xk, NCT* nct) {
		m_cpu = cpu;
		m_xk = xk;
		m_nct = nct;
	}
	//提供工作的函数
	void dowork() {
		//让零件工作起来，调用接口
		m_cpu->calculate();
		m_xk->display();
		m_nct->storage();
	}
	~Computer() {
		//释放CPU
		if (m_cpu != NULL) {
			delete m_cpu;
			m_cpu = NULL;
		}
		if (m_xk != NULL) {
			delete m_xk;
			m_xk = NULL;
		}
		if (m_nct != NULL) {
			delete m_nct;
			m_nct = NULL;
		}
	}
private:
	CPU* m_cpu;//CPU零件指针
	XK* m_xk;	 //显卡零件指针
	NCT* m_nct;//内存条零件指针
};

class LenovoCPU :public CPU {
public:
	virtual void calculate() {
		cout << "联想的CPU开始计算了" << endl;
	}
};
class LenovoXK :public XK {
public:
	virtual void display() {
		cout << "联想的显卡开始显示了" << endl;
	}
};
class LenovoNCT :public NCT {
public:
	virtual void storage() {
		cout << "联想的内存条开始存东西了" << endl;
	}
};
class IntelCPU :public CPU{
public:
	virtual void calculate() {
		cout << "Intel的CPU开始计算了" << endl;
	}
};
class IntelXK :public XK {
public:
	virtual void display() {
		cout << "Intel的显卡开始显示了" << endl;
	}
};
class IntelNCT :public NCT{
public:
	virtual void storage() {
		cout << "Intel的内存条开始存储了" << endl;
	}
};

void test01() {
	//第一台电脑的零件
	CPU* cpu1 = new IntelCPU;
	XK* xk1 = new IntelXK;
	NCT* nct1 = new IntelNCT;
	//创建第一台电脑 
	Computer* com1 = new Computer(cpu1, xk1, nct1);
	com1->dowork();
	delete com1; 
	//创建第二台电脑
	Computer* com2 = new Computer(new LenovoCPU, new LenovoXK, new LenovoNCT);
	com2->dowork();
	delete com2;
	//创建第三台电脑
	Computer* com3 = new Computer(new LenovoCPU, new LenovoXK, new LenovoNCT);
	com3->dowork();
	delete com3;
}
int main() {
	test01();
}
