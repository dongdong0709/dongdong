#include<iostream>
using namespace std;
//赋值运算符重载
class Person {
public:
	Person(int age) {
		m_age = new int(age);//指针指向新建的这个堆区
	}
	~Person() {
		if (m_age != NULL) {
			delete m_age;
			m_age = NULL;
		}
	}
	//重载赋值运算符
	Person& operator=(Person &p) {
		//编译器提供的是浅拷贝
		//m_age = p.m_age;
	
		//应该先判断是否有属性存放在堆区，如果有先释放干净，然后再深拷贝

		if (m_age != NULL) {
			delete m_age;
			m_age = NULL;
		}
		//深拷贝
		 m_age = new int(*p.m_age);//用m_age这个指针去指向这个新的内存空间
		 return *this;//返回自身this——找回自身*this
	}
	int* m_age;
};
void test01() {
	Person p1(18);
	Person p2(20);
	Person p3(23);

	p3 = p2 = p1;//赋值运算

	cout << "p1的年龄为" << *p1.m_age << endl;
	cout << "p2的年龄为" << *p2.m_age << endl;
	cout << "p3的年龄为" << *p3.m_age << endl;
}
int main() {
	test01();
	/*int a = 10;
	int b = 20;
	int c = 30;
	a = b = c;
	cout << "a=" << a << endl;
	cout << "b=" << b << endl;
	cout << "c=" << c << endl;*/
}
