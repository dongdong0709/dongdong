//分别利用普通写法和多态技术，设计实现两个操作数进行运算的计算器类
#include<iostream>
#include<string>
using namespace std;
//普通写法
class Calculator {
public:
	int getResult(string oper) {
		if (oper == "+") {
			return m_a + m_b;
		}
		else if (oper == "-") {
			return m_a - m_b;
		}
		else if (oper == "*") {
			return m_a * m_b;
		}
		//如果想扩展新的功能，需要在源码再次添加
		//开闭原则：对扩展进行开放，对修改进行关闭
		else if(oper == "/") {
			return m_a / m_b;
		}
	}
	int m_a;
	int m_b;
};
void test01() {
	Calculator cal;
	cal.m_a = 10;
	cal.m_b = 10;
	cout << "m_a" << "+" << "m_b" << "=" << cal.getResult("+") << endl;
	cout << "m_a" << "-" << "m_b" << "=" << cal.getResult("-") << endl;
	cout << "m_a" << "*" << "m_b" << "=" << cal.getResult("*") << endl;
	cout << "m_a" << "/" << "m_b" << "=" << cal.getResult("/") << endl;
}
//利用多态实现计算器
//实现计算器抽象类
class AbstractCalculator {
public:
	virtual int getResult() {
		return 0;
	}
	int m_a;
	int m_b;
};
//加法计算器类
class AddCalculator :public AbstractCalculator {
public:
	int getResult() {
		return m_a + m_b;
	}
};
//减法计算器类
class SubCalculator :public AbstractCalculator {
public:
	int getResult() {
		return m_a - m_b;
	}
};
//乘法计算器类
class MulCalculator :public AbstractCalculator {
public:
	int getResult() {
		return m_a * m_b;
	}
};
void test02() {
	//多态使用条件
	//1.父类指针或者引用指向子类对象

	//加法运算
	AbstractCalculator *abs=new AddCalculator;
	abs->m_a = 10;
	abs->m_b = 10;
	cout << abs->m_a << "+" << abs->m_b << "=" << abs->getResult() << endl;
	//用完后记得释放——堆区
	delete abs;

	//减法运算
	AbstractCalculator* abc = new SubCalculator;
	abc->m_a = 101;
	abc->m_b = 100;
	cout << abc->m_a << "-" << abc->m_b << "=" << abc->getResult() << endl;
	delete abc;

	//乘法运算
	AbstractCalculator* ab = new MulCalculator;
	ab->m_a = 100;
	ab->m_b = 100;
	cout << ab->m_a << "-" << ab->m_b << "=" << ab->getResult() << endl;
	delete ab;
}
int main() {
	//test01();
	test02();
}
