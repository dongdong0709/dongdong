#include<iostream>
using namespace std;
class A {	//父类
public:
	int a;
protected:
	int b;
private:
	int c;
};
class B :public A {	//公共继承
public:
	void func1() {	//分别访问A类三个权限下的值
		a = 10;	//父类中公共权限的成员 在子类中依然是公共权限——类内可以访问，类外也可以访问
		b = 20;	//父类中保护权限的成员 在子类中依然是保护权限——类内可以访问，类外不可以访问
		//	c = 30;	//父类中私有权限的成员 子类中访问不到
	}
};
void test01() {
	A a;
	a.a = 10;//公共权限的成员，类内可以访问，类外也可以访问
	//	a.b = 20;——类外不可以访问保护权限的成员
}
class C :protected A {	//保护继承
public:
	void func2() {
		a = 10;//父类中公共权限的成员 在子类中是保护权限——类内可以访问，类外不可以访问
		b = 20;//父类中保护权限的成员 在子类中是保护权限——类内可以访问，类外不可以访问
		//	c = 30;
	}
};
void test02() {
	C c;
	//c.a = 10;——类外不可以访问
	//c.b = 20;——类外不可以访问
}
class D :private A {	//私有继承
public:
	void func3() {
		a = 10;//父类中公共权限的成员 在子类中是私有权限——类内可以访问，类外不可以访问
		b = 20;//父类中保护权限的成员 在子类中是私有权限——类内可以访问，类外不可以访问
	}
};
void test03() {
	D d;
	//d.a = 10;——类外不可以访问
	//d.b = 20;——类外不可以访问
}
//孙子类
class E :public D {
public:
	void func4() {
		//	a = 10;//D类中的a是私有的，E访问不到
		//	b = 20;//同上
	}
};
int main() {
	test01();
	test02();
	test03();
}
