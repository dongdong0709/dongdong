#include<iostream>
#include<string>
using namespace std;
class Animal {
public:
	Animal() {
		cout << "Animal构造函数的调用" << endl;
	}
	////利用虚析构可以解决 父类指针释放子类对象时不干净的问题
	//virtual ~Animal() {
	//	cout << "Animal析构函数的调用" << endl;
	//}
	//纯虚析构——与虚析构二者只能出现一个——需要声明,也需要实现
	//有了纯虚析构后，这个类也称为抽象类，无法实例化对象
	virtual ~Animal() = 0;
	//纯虚函数
	virtual void speak() = 0;
};
Animal::~Animal() {
	cout << "Animal析构函数的调用" << endl;
}
class Cat :public Animal {
public:
	Cat(string name) {
		cout << "Cat构造函数的调用" << endl;
		m_name = new string(name);
	}
	virtual void speak() {
		cout << *m_name<<"小猫在说话" << endl;
	}
	~Cat() {
		if (m_name != NULL) {
			cout << "Cat析构函数的调用" << endl;
			delete m_name;
			m_name = NULL;
		}
	}
	string *m_name;//存放在 堆区
};
void test01() {
	Animal* animal = new Cat("汤姆");
	animal->speak();
	//父类指针在析构的时候 不会调用子类中的析构函数 导致子类若有堆区属性，出现内存泄漏
	delete animal;
}
int main() {
	test01();
}
